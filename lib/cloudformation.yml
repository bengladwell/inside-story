AWSTemplateFormatVersion: 2010-09-09

Parameters:
  SiteAssetDomain:
    Type: String
    Description: Fully qualified hostname for site assets
  DevelopmentDomain:
    Type: String
    Description: Fully qualified hostname for development environment
  VideoAssetDomain:
    Type: String
    Description: Fully qualified hostname for video assets
  AuthDomain:
    Type: String
    Description: Fully qualified hostname for the auth API
  OAuthCallbackPath:
    Type: String
    Description: OAuth callback route path including leading /
  LoginPath:
    Type: String
    Description: Login route path including leading /
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone Id
  VideoPublicKey:
    Type: String
    Description: Public key used for signing cookies for access to video assets
  VideoPrivateKeyUriEncoded:
    Type: String
    Description: Private key used for signing cookies for access to video assets, URI encoded
  SignedCookieDomain:
    Type: String
    Description: Domain used for the signed cookie that gives access to video assets
  GoogleClientId:
    Type: String
    Description: Google client_id for authorizing Google sign in
  GoogleClientSecret:
    Type: String
    Description: Google client_secret for authorizing Google sign in
  VideoAssetBucket:
    Type: String
    Description: Bucket containing stored video assets
  VideoAssetPath:
    Type: String
    Description: Optional path for video assets in VideoAssetBucket; start but do not end with /
  AccessAdminEmail:
    Type: String
    Description: The email address to which access request notifications will be sent
  AccessSourceEmail:
    Type: String
    Description: The email address from which access request notifications will be sent
  Base64EncryptionKey:
    Type: String
    Description: Base64 encoded encryption key for encrypting sensitive data

Rules:
  domainParamsRequired:
    Assertions:
      - Assert: !Not
        - !Equals
          - !Ref SiteAssetDomain
          - ""
      - Assert: !Not
        - !Equals
          - !Ref VideoAssetDomain
          - ""
      - Assert: !Not
        - !Equals
          - !Ref OAuthCallbackPath
          - ""
      - Assert: !Not
        - !Equals
          - !Ref AuthDomain
          - ""
      - Assert: !Not
        - !Equals
          - !Ref HostedZoneId
          - ""
  googleParamsRequired:
    Assertions:
      - Assert: !Not
        - !Equals
          - !Ref GoogleClientId
          - ""
        AssertDescription: GoogleClientId is required
      - Assert: !Not
        - !Equals
          - !Ref GoogleClientSecret
          - ""
        AssertDescription: GoogleClientSecret is required
  videoParamsRequired:
    Assertions:
      - Assert: !Not
        - !Equals
          - !Ref VideoAssetBucket
          - ""
      - Assert: !Not
        - !Equals
          - !Ref VideoPrivateKeyUriEncoded
          - ""
      - Assert: !Not
        - !Equals
          - !Ref VideoPublicKey
          - ""
      - Assert: !Not
        - !Equals
          - !Ref SignedCookieDomain
          - ""

Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AWS::StackName
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub ["arn:aws:s3:::${StackName}/*", { StackName: !Ref AWS::StackName }]

  VideoDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ["${VideoAssetBucket}.s3.${Region}.amazonaws.com", { VideoAssetBucket: !Ref VideoAssetBucket, Region: !Ref AWS::Region }]
            OriginPath: !Ref VideoAssetPath
            Id: video-assets
            S3OriginConfig:
              OriginAccessIdentity: !Sub ["origin-access-identity/cloudfront/${VideoAssetOriginAccessIdentity}", { VideoAssetOriginAccessIdentity: !Ref VideoAssetOriginAccessIdentity }]
        Enabled: true
        HttpVersion: http2
        Aliases:
          - !Ref VideoAssetDomain
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          TargetOriginId: video-assets
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
          TrustedKeyGroups:
            - !Ref VideoKeyGroup
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1"
          AcmCertificateArn: !Ref VideoCertificate
        IPV6Enabled: true

  VideoKeyGroup:
    Type: AWS::CloudFront::KeyGroup
    Properties:
      KeyGroupConfig:
        Name: !Ref AWS::StackName
        Items:
          - !Ref CFVideoPublicKey

  CFVideoPublicKey:
    Type: AWS::CloudFront::PublicKey
    Properties:
      PublicKeyConfig:
        CallerReference: !Ref AWS::StackName
        Name: !Ref AWS::StackName
        EncodedKey: !Ref VideoPublicKey

  VideoAssetOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ["${StackName}-videos-cloudfront", { StackName: !Ref AWS::StackName }]

  VideoCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref VideoAssetDomain
      DomainValidationOptions:
        - DomainName: !Ref VideoAssetDomain
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref SiteAssetDomain
      DomainValidationOptions:
        - DomainName: !Ref SiteAssetDomain
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ["${BucketName}.s3-website-${Region}.amazonaws.com", { BucketName: !Ref SiteBucket, Region: !Ref AWS::Region }]
            Id: site-assets
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: http2
        Aliases:
          - !Ref SiteAssetDomain
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: site-assets
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa # Managed-UserAgentRefererHeaders
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1"
          AcmCertificateArn: !Ref Certificate
        IPV6Enabled: true

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref SiteAssetDomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  VideoDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref VideoAssetDomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt VideoDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  AuthAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ["${StackName}-auth", { StackName: !Ref AWS::StackName }]
      Description: Handles OAuth2 auth
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: True
        AllowOrigins:
          - !GetAtt UserPool.ProviderURL
          - !Sub [ "https://${SiteAssetDomain}", { SiteAssetDomain: !Ref SiteAssetDomain }]
        AllowMethods:
          - GET

  OAuthCallbackRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AuthAPI
      RouteKey: !Sub ["GET ${OAuthCallbackPath}", { OAuthCallbackPath: !Ref OAuthCallbackPath }]
      Target: !Sub ["integrations/${Integration}", { Integration: !Ref OAuthCallbackIntegration }]

  AuthStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref AuthAPI
      AutoDeploy: True
      StageName: $default

  OAuthCallbackIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AuthAPI
      IntegrationMethod: GET
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt OAuthCallbackFunction.Arn
      PayloadFormatVersion: 1.0

  AuthDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref AuthDomain
      DomainNameConfigurations:
        - CertificateArn: !Ref AuthCertificate
          CertificateName: !Sub ["${StackName}-auth", { StackName: !Ref AWS::StackName }]

  AuthApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref AuthAPI
      DomainName: !Ref AuthDomainName
      Stage: "$default"

  AuthCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref AuthDomain
      DomainValidationOptions:
        - DomainName: !Ref AuthDomain
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS

  AuthDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref AuthDomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt AuthDomainName.RegionalDomainName
        HostedZoneId: !GetAtt AuthDomainName.RegionalHostedZoneId

  OAuthCallbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OAuthCallbackFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${Region}:${Account}:${API}/*/*${OAuthCallbackPath}"
        # TODO: can that empty line be removed?
        -
          Region: !Ref AWS::Region
          Account: !Ref AWS::AccountId
          API: !Ref AuthAPI
          OAuthCallbackPath: !Ref OAuthCallbackPath

  OAuthCallbackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ["${StackName}_OAuth_Callback", { StackName: !Ref AWS::StackName }]
      Description: Retrieves tokens and signs cookies for access to videos
      Handler: index.handler
      Role: !GetAtt LogWriterFunctionRole.Arn
      Environment:
        Variables:
          CLOUDFRONT_KEY_PAIR_ID: !Ref CFVideoPublicKey
          URI_ENCODED_PRIVATE_KEY: !Ref VideoPrivateKeyUriEncoded
          COOKIE_DOMAIN: !Ref SignedCookieDomain
          VIDEO_ASSET_DOMAIN: !Ref VideoAssetDomain
          ORIG_REDIRECT_URI: !Sub ["https://${AuthDomain}/oauth_callback", { AuthDomain: !Ref AuthDomain }]
          USER_POOL_NAME: !Ref AWS::StackName
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          ENCRYPTION_KEY: !Ref Base64EncryptionKey
      Code:
        ZipFile: |
          const crypto = require('crypto')
          const { getSignedCookies } = require('@aws-sdk/cloudfront-signer')

          exports.handler = async (event) => {

            // Validate state
            const stateCookie = event.headers.Cookie.split('; ').find(cookie => cookie.startsWith('state='))
            const encryptedString = stateCookie.split('=')[1]
            const [ivHex, encrypted] = encryptedString.split(':');
            const encryptionKey = Buffer.from(process.env.ENCRYPTION_KEY, 'base64')
            const iv = Buffer.from(ivHex, 'hex');
            const decipher = crypto.createDecipheriv('aes-256-cbc', encryptionKey, iv);
            let decrypted = decipher.update(encrypted, 'hex', 'utf8');
            decrypted += decipher.final('utf8');
            console.log(decrypted)
            const [stateToken, encodedReferer] = decrypted.split(':')
            const referer = decodeURIComponent(encodedReferer)
            if (stateToken !== event.queryStringParameters.state) {
              return {
                statusCode: 400,
                body: 'Invalid state'
              }
            }

            try {
              const response = await fetch(`https://${process.env.USER_POOL_NAME}.auth.us-east-1.amazoncognito.com/oauth2/token`, {
                method: 'POST',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                  grant_type: 'authorization_code',
                  code: event.queryStringParameters.code,
                  client_id: process.env.USER_POOL_CLIENT_ID,
                  redirect_uri: process.env.ORIG_REDIRECT_URI,
                }).toString(),
              })
              const tokens = await response.json()

              const privateKey = decodeURI(process.env.URI_ENCODED_PRIVATE_KEY)
              const now = new Date()
              const cookies = getSignedCookies({
                privateKey,
                keyPairId: process.env.CLOUDFRONT_KEY_PAIR_ID,
                policy: JSON.stringify({
                  Statement: [{
                    Resource: `https://${process.env.VIDEO_ASSET_DOMAIN}/*`,
                    Condition: {
                      DateLessThan: {
                        "AWS:EpochTime": Math.floor(now.setDate(now.getDate() + 30) / 1000)
                      }
                    }
                  }]
                })
              })

              const idToken = `idToken=${tokens.id_token}; Secure; SameSite=Strict; Domain=${process.env.COOKIE_DOMAIN}`
              
              return {
                statusCode: 302,
                headers: {
                  Location: referer,
                },
                multiValueHeaders: {
                  'Set-Cookie': Object.entries(cookies).reduce((acc, [key, value]) => (
                    [
                      ...acc,
                      `${key}=${value}; Secure; HttpOnly; SameSite=Strict; Domain=${process.env.COOKIE_DOMAIN}`,
                    ]
                  ), [idToken])
                }
              }
            } catch (e) {
              console.log(e)
            }
          }
      Runtime: nodejs22.x

  LogWriterFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ["${StackName}_LogWriter", { StackName: !Ref AWS::StackName }]
      Description: Allows lambda functions to write logs
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  LoginRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AuthAPI
      RouteKey: !Sub ["GET ${LoginPath}", { OAuthCallbackPath: !Ref LoginPath }]
      Target: !Sub ["integrations/${Integration}", { Integration: !Ref LoginIntegration }]

  LoginIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AuthAPI
      IntegrationMethod: GET
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoginFunction.Arn
      PayloadFormatVersion: 1.0

  LoginFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LoginFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${Region}:${Account}:${API}/*/*${LoginPath}"
        -
          Region: !Ref AWS::Region
          Account: !Ref AWS::AccountId
          API: !Ref AuthAPI
          LoginPath: !Ref LoginPath

  LoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ["${StackName}_Login", { StackName: !Ref AWS::StackName }]
      Description: Creates state and redirects to Cognito /authorize endpoint
      Handler: index.handler
      Role: !GetAtt LogWriterFunctionRole.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_NAME: !Ref AWS::StackName
          REDIRECT_URI: !Sub ["https://${AuthDomain}/oauth_callback", { AuthDomain: !Ref AuthDomain }]
          ENCRYPTION_KEY: !Ref Base64EncryptionKey
          SITE_URL: !Sub [ "https://${SiteAssetDomain}", { SiteAssetDomain: !Ref SiteAssetDomain }]
      Code:
        ZipFile: |
          const crypto = require('crypto')
          const { URL } = require('url')

          exports.handler = async (event) => {
            const referer = encodeURIComponent(event.headers.referer || process.env.SITE_URL)
            const stateToken = crypto.randomBytes(16).toString('hex')
            const state = `${stateToken}:${referer}`

            // encrypt state
            const encryptionKey = Buffer.from(process.env.ENCRYPTION_KEY, 'base64')
            const iv = crypto.randomBytes(16)
            const cipher = crypto.createCipheriv('aes-256-cbc', encryptionKey, iv)
            let encrypted = cipher.update(state, 'utf8', 'hex')
            encrypted += cipher.final('hex')
            const encryptedState = `${iv.toString('hex')}:${encrypted}`

            const location = new URL(`https://${process.env.USER_POOL_NAME}.auth.us-east-1.amazoncognito.com/oauth2/authorize`)
            location.searchParams.append('response_type', 'code')
            location.searchParams.append('client_id', process.env.USER_POOL_CLIENT_ID)
            location.searchParams.append('redirect_uri', process.env.REDIRECT_URI)
            location.searchParams.append('state', stateToken)
            event.queryStringParameters && Object.entries(event.queryStringParameters).forEach(([key, value]) => {
              location.searchParams.append(key, value)
            })

            return {
              statusCode: 302,
              headers: {
                Location: location.toString(),
                'Set-Cookie': `state=${encryptedState}; Secure; HttpOnly; SameSite=Strict}`
              }
            }
          }
      Runtime: nodejs22.x

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
      LambdaConfig:
        PreTokenGeneration: !GetAtt ClaimsAdderFunction.Arn
        # Specify by explict ARN rather than `UserInitializerFunction.Arn` to avoid circular dependency
        PostConfirmation: !Sub ["arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}_UserInitializer", { StackName: !Ref AWS::StackName }]
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          RequireLowercase: true
          RequireSymbols: false
          RequireNumbers: true
          MinimumLength: 8
          RequireUppercase: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Schema:
        - Name: is_approved
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: is_admin
          AttributeDataType: String
          Mutable: true
          Required: false

  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderType: Google
      ProviderName: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: profile email
      AttributeMapping:
        username: sub
        email: email
        name: name
        picture: picture

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AWS::StackName

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - GoogleIdentityProvider
      - UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Sub ["https://${AuthDomain}/oauth_callback", { AuthDomain: !Ref AuthDomain }]
      LogoutURLs:
        - !Sub ["https://${AuthDomain}/oauth_callback", { AuthDomain: !Ref AuthDomain }]
      ClientName: site-users
      IdTokenValidity: 24
      AccessTokenValidity: 24
      TokenValidityUnits:
        IdToken: hours
        AccessToken: hours
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
        - Google

  ClaimsAdderFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ["${StackName}_Claims_Adder", { StackName: !Ref AWS::StackName }]
      Description: Allows lambda functions to write logs
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ClaimsAdderFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ClaimsAdderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  ClaimsAdderFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ["${StackName}_Claims_Adder", { StackName: !Ref AWS::StackName }]
      Description: Adds claims to id token
      Handler: index.handler
      Role: !GetAtt ClaimsAdderFunctionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            event.response = {
              claimsOverrideDetails: {
                claimsToAddOrOverride: {
                  is_approved: event.request.userAttributes['custom:is_approved'] == 'true' ? 'true' : 'false',
                  name: event.request.userAttributes.name,
                  picture: event.request.userAttributes.picture,
                }
              }
            }
            return event
          }
      Runtime: nodejs22.x

  UserInitializerFunctionPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Allow UserInitializerFunction to send emails, update cognito, and write logs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - cognito-idp:AdminUpdateUserAttributes
            Resource:
              - !GetAtt UserPool.Arn
          - Effect: Allow
            Action:
              - 'ses:SendEmail'
              - 'ses:SendRawEmail'
            Resource:
              - '*'

  UserInitializerFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ["${StackName}_User_Initializer", { StackName: !Ref AWS::StackName }]
      Description: Allows UserInitializerFunction to connect to send emails and write logs
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref UserInitializerFunctionPolicy

  UserInitializerFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UserInitializerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  UserInitializerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ["${StackName}_UserInitializer", { StackName: !Ref AWS::StackName }]
      Description: Initializes Inside Story users
      Handler: index.handler
      Role: !GetAtt UserInitializerFunctionRole.Arn
      Environment:
        Variables:
          ACCESS_ADMIN_EMAIL: !Ref AccessAdminEmail
          ACCESS_SOURCE_EMAIL: !Ref AccessSourceEmail
      Code:
        ZipFile: |
          const { SendEmailCommand } = require("@aws-sdk/client-ses")
          const { SESClient } = require("@aws-sdk/client-ses")
          const sesClient = new SESClient()

          const { CognitoIdentityProviderClient, AdminUpdateUserAttributesCommand } = require('@aws-sdk/client-cognito-identity-provider')
          const cognitoClient = new CognitoIdentityProviderClient({});

          exports.handler = async (event) => {
            const { userPoolId, userName } = event
            const { email, name } = event.request.userAttributes

            const params = {
              UserAttributes: [{
                Name: 'custom:is_approved',
                Value: 'false'
              }],
              UserPoolId: userPoolId,
              Username: userName,
            }

            try {
              const command = new AdminUpdateUserAttributesCommand(params)
              await cognitoClient.send(command)
            } catch (error) {
              console.error('Error updating custom attribute:', error);
              throw error
            }

            try {
              const sendEmailCommand = new SendEmailCommand({
                Destination: {
                  ToAddresses: [process.env.ACCESS_ADMIN_EMAIL]
                },
                Message: {
                  Body: {
                    Text: { Data: `${name} <${email}> has requested access` }
                  },

                  Subject: { Data: `Access request: ${name} <${email}>` }
                },
                Source: process.env.ACCESS_SOURCE_EMAIL
              })
              await sesClient.send(sendEmailCommand)
            } catch (error) {
              console.error('Error sending email:', error);
              throw error
            }

            return event
          }
      Runtime: nodejs22.x

Outputs:
  BucketName:
    Description: Site bucket name
    Value: !Ref SiteBucket
  UserPoolClientId:
    Description: Cognito User Pool Client id
    Value: !Ref UserPoolClient
  UserPoolProviderURL:
    Description: Cognito User Pool Provider URL
    Value: !GetAtt UserPool.ProviderURL
  SiteDomain:
    Description: The CloudFront domain for site assets
    Value: !Ref SiteAssetDomain
  VideoDomain:
    Description: The CloudFront domain for video assets
    Value: !Ref VideoAssetDomain
  AuthDomain:
    Description: The CloudFront domain for authenticator route
    Value: !Ref AuthDomain
  VideoAssetOriginAccessIdentity:
    Description: The ID for the origin access identity that will be used by the video CloudFront distribution
    Value: !Ref VideoAssetOriginAccessIdentity
